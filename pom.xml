<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>tinyleon.component</groupId>
    <artifactId>java</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>

        <!-- 读取配置 -->
        <dependency>
            <groupId>commons-configuration</groupId>
            <artifactId>commons-configuration</artifactId>
            <version>1.10</version>
        </dependency>

        <!-- druid 连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.7</version>
        </dependency>

        <!-- json -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.17</version>
        </dependency>

        <!-- http -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.2</version>
        </dependency>

        <!-- lang -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.4</version>
        </dependency>
    </dependencies>

    <build>
        <finalName>tinyleon.component</finalName>
        <plugins>
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-war-plugin</artifactId>-->
<!--                <configuration>-->
<!--                    &lt;!&ndash; 解决sevlet3.0，删除web.xml编译报错问题 &ndash;&gt;-->
<!--                    <failOnMissingWebXml>false</failOnMissingWebXml>-->
<!--                </configuration>-->
<!--            </plugin>-->

            <plugin>
                <!-- maven是个项目管理工具，如果我们不告诉它我们的代码要使用什么样的jdk版本编译的话， 它就会用maven-compiler-plugin默认的jdk版本来进行处理，这样就容易出现版本不匹配的问题，
                    以至于可能导致编译不通过的问题。 -->
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <source>1.8</source><!-- 源代码使用的开发版本 -->
                    <target>1.8</target><!-- 需要生成的目标class文件的编译版本 -->
                    <encoding>UTF8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.7</version>
            </plugin>
        </plugins>
        <!-- 解决 ”编译时无法生成mapper相关文件“ 的问题 -->
        <resources>
            <!--<resource> -->
            <!--<directory>src/main/java</directory> -->
            <!--<excludes> -->
            <!--<exclude>**/*.java</exclude> -->
            <!--</excludes> -->
            <!--</resource> -->
            <!--<resource> -->
            <!--<directory>src/main/java</directory> -->
            <!--<includes> -->
            <!--<include>**/*.* </include> -->
            <!--</includes> -->
            <!--</resource> -->
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <include>**/*.tld</include>
                </includes>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/resources.${deploy.type}</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <include>**/*.tld</include>
                </includes>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <include>**/*.tld</include>
                </includes>
                <filtering>true</filtering>
            </resource>
            <!--<resource> -->
            <!--<directory>src/main/spring</directory> -->
            <!--<includes> -->
            <!--<include>**/*.properties</include> -->
            <!--<include>**/*.xml</include> -->
            <!--<include>**/*.tld</include> -->
            <!--</includes> -->
            <!--<filtering>true</filtering> -->
            <!--</resource> -->
        </resources>
    </build>
</project>